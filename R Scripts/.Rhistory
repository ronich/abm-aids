# install.packages("mgcv")
# install.packages("DiceKriging")
# install.packages("rgl")
library(plyr)
library(lattice)
library(mgcv)
library(DiceKriging)
library(rgl)
install.packages("rgl")
library(plyr)
library(lattice)
library(mgcv)
library(DiceKriging)
library(rgl)
if(dir.exists('plots') == FALSE){
dir.create('plots')
}
# 1. read the BehaviorSpace experiment output----
results <- read.csv("aids_output.txt", sep=";", header=FALSE, dec='.')
head(results)
names(results)
names(results) <- c("iter1", "iter2", "ccept_use", "test_freq", "ss_time", "pcnt_infected") #ss_time od steady state time :)
results$ccept_use <- results$ccept_use * 100
results$test_freq <- results$test_freq * 100
results$pcnt_infected <- results$pcnt_infected * 100
zlim <- range(results$pcnt_infected)
zlen <- zlim[2] - zlim[1] + 1
zlen
# 2. aggregate results----
sum.data = ddply(results, .(ccept_use, test_freq), summarize,
m_pcnt_infected = mean(pcnt_infected),
sd_pcnt_infected = sd(pcnt_infected))
sum.data <- sum.data[order(sum.data$ccept_use, sum.data$test_freq),]
head(sum.data)
setwd("D:/Studia/Modelowanie wieloagentowe[Kamiński]/R Scripts")
if(dir.exists('plots') == FALSE){
dir.create('plots')
}
# 1. read the BehaviorSpace experiment output----
results <- read.csv("aids_output.txt", sep=";", header=FALSE, dec='.')
head(results)
names(results)
names(results) <- c("iter1", "iter2", "ccept_use", "test_freq", "ss_time", "pcnt_infected") #ss_time od steady state time :)
results$ccept_use <- results$ccept_use * 100
results$test_freq <- results$test_freq * 100
results$pcnt_infected <- results$pcnt_infected * 100
zlim <- range(results$pcnt_infected)
zlen <- zlim[2] - zlim[1] + 1
zlen
# 2. aggregate results----
sum.data = ddply(results, .(ccept_use, test_freq), summarize,
m_pcnt_infected = mean(pcnt_infected),
sd_pcnt_infected = sd(pcnt_infected))
sum.data <- sum.data[order(sum.data$ccept_use, sum.data$test_freq),]
head(sum.data)
# 3. visualize metamodel response surface----
# c_ - counterplot
# w_ - wideframe
contourplot(m_pcnt_infected ~ ccept_use + test_freq, data = sum.data,
cuts = 20, region = T, col.regions = terrain.colors(zlen),
xlab = "Szansa na użycie antykoncepcji (%)",
ylab = "Szansa na zbadanie się (%)")
# dev.off()
# png('plots/w_basic_model.png')
wireframe(m_pcnt_infected ~ ccept_use + test_freq, data = sum.data,
drape = TRUE, colorkey = TRUE, pretty = T, region = T,
cuts = 10, region = T, col.regions = terrain.colors(zlim),
xlab = "Użycie antykoncepcji", ylab = "Badania",
zlab = "Zarażeni")
# dev.off()
# 4. generate a new set of points for metamodel prediction----
range.for.ccept_use <- range(results$ccept_use)      # range for ccept_use
range.for.test_freq <- range(results$test_freq)  # range for test_freq
ccept_use_range <-   seq(range.for.ccept_use[1], range.for.ccept_use[2])
test_freq_range <- seq(range.for.test_freq[1], range.for.test_freq[2])
new.data <- expand.grid(ccept_use_range, test_freq_range)
colnames(new.data) <- c("ccept_use", "test_freq")
head(new.data)
# 5. our 1st metamodel----
m1 <- lm(pcnt_infected ~ ccept_use + test_freq, data = results)
summary(m1)
results <- read.csv("aids_output.txt", sep=";", header=FALSE, dec='.')
head(results)
names(results) <- c("iter1", "iter2", "ccept_use", "test_freq", "ss_time", "pcnt_infected") #ss_time od steady state time :)
results$ccept_use <- results$ccept_use * 100
results$test_freq <- results$test_freq * 100
results$pcnt_infected <- results$pcnt_infected * 100
zlim <- range(results$pcnt_infected)
zlen <- zlim[2] - zlim[1] + 1
zlen
# 2. aggregate results----
sum.data = ddply(results, .(ccept_use, test_freq), summarize,
m_pcnt_infected = mean(pcnt_infected),
sd_pcnt_infected = sd(pcnt_infected))
sum.data <- sum.data[order(sum.data$ccept_use, sum.data$test_freq),]
head(sum.data)
contourplot(m_pcnt_infected ~ ccept_use + test_freq, data = sum.data,
cuts = 20, region = T, col.regions = terrain.colors(zlen),
xlab = "Szansa na użycie antykoncepcji (%)",
ylab = "Szansa na zbadanie się (%)")
results <- read.csv("aids_output_3.txt", sep=";", header=FALSE, dec='.')
results <- read.csv("aids_output.txt", sep=";", header=FALSE, dec='.')
results <- read.csv("aids_output.txt", sep=";", header=FALSE, dec='.')
head(results)
names(results)
names(results) <- c("iter1", "iter2", "ccept_use", "test_freq", "ss_time", "pcnt_infected") #ss_time od steady state time :)
results$ccept_use <- results$ccept_use * 100
results$test_freq <- results$test_freq * 100
results$pcnt_infected <- results$pcnt_infected * 100
zlim <- range(results$pcnt_infected)
zlen <- zlim[2] - zlim[1] + 1
zlen
# aggregate results
#install.packages("plyr")
library(plyr)
sum.data = ddply(results, .(ccept_use, test_freq), summarize,
m_pcnt_infected = mean(pcnt_infected),
sd_pcnt_infected = sd(pcnt_infected))
sum.data <- sum.data[order(sum.data$ccept_use, sum.data$test_freq),]
head(sum.data)
rm(list = ls())
results <- read.csv("aids_output.txt", sep=";", header=FALSE, dec='.')
head(results)
names(results)
names(results) <- c("iter1", "iter2", "ccept_use", "test_freq", "ss_time", "pcnt_infected") #ss_time od steady state time :)
results$ccept_use <- results$ccept_use * 100
results$test_freq <- results$test_freq * 100
results$pcnt_infected <- results$pcnt_infected * 100
tail(results)
names(results) <- c("iter1", "iter2", "ccept_use", "test_freq", "ss_time", "pcnt_infected") #ss_time od steady state time :)
head(results)
rm(results)
head(results)
names(results) <- c("iter1", "iter2", "ccept_use", "test_freq", "ss_time", "pcnt_infected") #ss_time od steady state time :)
results <- read.csv("aids_output.txt", sep=";", header=FALSE, dec='.')
r<-read.table("aids_output.txt", sep=";")
r<-read.table("aids_output.txt", sep=";",
col.names=c("iter1", "iter2", "ccept_use", "test_freq", "ss_time", "pcnt_infected"),
strip.white=TRUE)
fill=FALSE,
r<-read.table("aids_output.txt", sep=";",
strip.white=TRUE)
col.names=c("iter1", "iter2", "ccept_use", "test_freq", "ss_time", "pcnt_infected"),
r<-read.table("aids_output.txt",
sep=";",
col.names=c("iter1", "iter2", "ccept_use", "test_freq", "ss_time", "pcnt_infected"),
strip.white=TRUE)
r<-read.table("aids_output.txt",
col.names=c("iter1", "iter2", "ccept_use", "test_freq", "ss_time", "pcnt_infected"),
sep=";",
fill=FALSE,
strip.white=TRUE)
help(read.csv)
r<-read.table("aids_output.txt",
col.names=c("iter1", "iter2", "ccept_use", "test_freq", "ss_time", "pcnt_infected"),
sep=";",
fill=FALSE)
r<-read.table("aids_output.txt",
col.names=c("iter1", "iter2", "ccept_use", "test_freq", "ss_time", "pcnt_infected"),
sep=";",
fill=FALSE,
dec='.')
r<-read.table("aids_output.txt",
col.names=c("iter1", "iter2", "ccept_use", "test_freq", "ss_time", "pcnt_infected"),
fill=TRUE,
sep=";",
dec='.')
head(r)
a <- sapply(airquality, function(x) sum(is.na(x)))
a <- sapply(r, function(x) sum(is.na(x)))
a
tail(r)
r<-read.table("aids_output.txt",
col.names=c("iter1", "iter2", "ccept_use", "test_freq", "ss_time", "pcnt_infected"),
sep=";",
fill=TRUE,
dec='.')
tail(r)
r<-read.table("aids_output.txt",
sep=";",
col.names=c("iter1", "iter2", "iter3", "ccept_use", "test_freq", "ss_time", "pcnt_infected"),
fill=FALSE,
dec='.')
tail(r)
tail(r)
head(r)
r<-read.table("aids_output.txt",
sep=";",
fill=FALSE,
col.names=c("iter1", "iter2", "ccept_use", "test_freq", "ss_time", "pcnt_infected"),
dec='.')
head(r)
tail(r)
head(r)
results <- read.csv("aids_output.txt", sep=";", header=FALSE, dec='.')
head(results)
names(results)
names(results) <- c("iter1", "iter2", "ccept_use", "test_freq", "ss_time", "pcnt_infected") #ss_time od steady state time :)
names(results)
head(results)
results <- read.csv("aids_output.txt", sep=";", header=FALSE, dec='.')
head(results)
names(results)
names(results) <- c("iter1", "iter2", "ccept_use", "test_freq", "ss_time", "pcnt_infected") #ss_time od steady state time :)
results$ccept_use <- results$ccept_use * 100
results$pcnt_infected <- results$pcnt_infected * 100
results$test_freq <- results$test_freq * 100
zlim <- range(results$pcnt_infected)
zlen <- zlim[2] - zlim[1] + 1
zlen
# 2. aggregate results----
sum.data = ddply(results, .(ccept_use, test_freq), summarize,
m_pcnt_infected = mean(pcnt_infected),
sd_pcnt_infected = sd(pcnt_infected))
sum.data <- sum.data[order(sum.data$ccept_use, sum.data$test_freq),]
head(sum.data)
# 3. visualize metamodel response surface----
# w_ - wideframe
# c_ - counterplot
# png('plots/c_basic_model.png')
contourplot(m_pcnt_infected ~ ccept_use + test_freq, data = sum.data,
cuts = 20, region = T, col.regions = terrain.colors(zlen),
ylab = "Szansa na zbadanie się (%)")
xlab = "Szansa na użycie antykoncepcji (%)",
# png('plots/w_basic_model.png')
# dev.off()
wireframe(m_pcnt_infected ~ ccept_use + test_freq, data = sum.data,
drape = TRUE, colorkey = TRUE, pretty = T, region = T,
cuts = 10, region = T, col.regions = terrain.colors(zlim),
xlab = "Użycie antykoncepcji", ylab = "Badania",
zlab = "Zarażeni")
# dev.off()
# 4. generate a new set of points for metamodel prediction----
range.for.ccept_use <- range(results$ccept_use)      # range for ccept_use
range.for.test_freq <- range(results$test_freq)  # range for test_freq
ccept_use_range <-   seq(range.for.ccept_use[1], range.for.ccept_use[2])
test_freq_range <- seq(range.for.test_freq[1], range.for.test_freq[2])
new.data <- expand.grid(ccept_use_range, test_freq_range)
head(new.data)
colnames(new.data) <- c("ccept_use", "test_freq")
# 5. our 1st metamodel----
m1 <- lm(pcnt_infected ~ ccept_use + test_freq, data = results)
summary(m1)
# visualize metamodel response surface
new.data$pcnt_infected.hat <- predict(m1, newdata = new.data)
contourplot(pcnt_infected.hat ~ ccept_use + test_freq, data = new.data,
# png('plots/c_1st_meta.png')
cuts = 20, region = T, col.regions = terrain.colors(zlen),
ylab = "Szansa na zbadanie się (%)")
xlab = "Szansa na użycie antykoncepcji (%)",
# dev.off()
# png('plots/w_1st_meta.png')
wireframe(pcnt_infected.hat ~ ccept_use + test_freq, data = new.data,
drape = TRUE, colorkey = TRUE, pretty = T, region = T,
cuts = 10, region = T, col.regions = terrain.colors(zlen),
xlab = "Użycie antykoncepcji", ylab = "Badania",
zlab = "Zarażeni")
# dev.off()
m2 <- lm(pcnt_infected ~ ccept_use * test_freq, data = results)
# 6. make a better linear model with parameter interaction----
summary(m2)
# visualize metamodel response surface
new.data$pcnt_infected.hat <- predict(m2, newdata = new.data)
# png('plots/c_interaction.png')
contourplot(pcnt_infected.hat ~ ccept_use + test_freq, data = new.data,
cuts = 20, region = T, col.regions = terrain.colors(zlen))
# dev.off()
wireframe(pcnt_infected.hat ~ ccept_use + test_freq, data = new.data,
# png('plots/w_interaction.png')
cuts = 10, region = T, col.regions = terrain.colors(zlen),
drape = TRUE, colorkey = TRUE, pretty = T, region = T,
xlab = "Użycie antykoncepcji", ylab = "Badania",
zlab = "Zarażeni")
# dev.off()
# 7. nonlinearity - logarithms-----
m3 <- lm(pcnt_infected ~ (ccept_use + test_freq + log(ccept_use) + log(test_freq))^2, data = results)
summary(m3)
# visualize metamodel response surface
new.data$pcnt_infected.hat <- predict(m3, newdata = new.data)
contourplot(pcnt_infected.hat ~ ccept_use + test_freq, data = new.data,
ylab = "Szansa na zbadanie się (%)")
xlab = "Szansa na użycie antykoncepcji (%)",
# png('plots/c_log.png')
# dev.off()
# png('plots/w_log.png')
cuts = 20, region = T, col.regions = terrain.colors(zlen),
wireframe(pcnt_infected.hat ~ ccept_use + test_freq, data = new.data,
cuts = 10, region = T, col.regions = terrain.colors(zlim),
drape = TRUE, colorkey = TRUE, pretty = T, region = T,
xlab = "Użycie antykoncepcji", ylab = "Badania",
zlab = "Zarażeni")
# dev.off()
# 8. nonlinearity - squares----
m4 <- lm(pcnt_infected ~ (ccept_use + test_freq + I(ccept_use^2) + I(test_freq^2))^2, data = results)
summary(m4)
new.data$pcnt_infected.hat <- predict(m4, newdata = new.data)
# visualize metamodel response surface
# png('plots/c_squares.png')
contourplot(pcnt_infected.hat ~ ccept_use + test_freq, data = new.data,
cuts = 20, region = T, col.regions = terrain.colors(zlen),
ylab = "Szansa na zbadanie się (%)")
xlab = "Szansa na użycie antykoncepcji (%)",
# dev.off()
wireframe(pcnt_infected.hat ~ ccept_use + test_freq, data = new.data,
# png('plots/w_squares.png')
drape = TRUE, colorkey = TRUE, pretty = T, region = T,
cuts = 10, region = T, col.regions = terrain.colors(zlim),
xlab = "Użycie antykoncepcji", ylab = "Badania",
zlab = "Zarażeni")
# dev.off()
# 9. GAM----
m5 <- gam(pcnt_infected ~ s(ccept_use) + s(test_freq), data = results)
# visualize metamodel response surface
summary(m5)
new.data$pcnt_infected.hat <- predict(m5, newdata = new.data)
# png('plots/c_gam.png')
contourplot(pcnt_infected.hat ~ ccept_use + test_freq, data = new.data,
cuts = 20, region = T, col.regions = terrain.colors(zlen),
xlab = "Szansa na użycie antykoncepcji (%)",
ylab = "Szansa na zbadanie się (%)")
# dev.off()
# png('plots/w_gam.png')
wireframe(pcnt_infected.hat ~ ccept_use + test_freq, data = new.data,
drape = TRUE, colorkey = TRUE, pretty = T, region = T,
cuts = 10, region = T, col.regions = terrain.colors(zlim),
xlab = "Użycie antykoncepcji", ylab = "Badania",
zlab = "Zarażeni")
rm(list = ls())
# 0. Packages initialization, folder for plots----
# install.packages("plyr")
# install.packages("lattice")
# install.packages("mgcv")
# install.packages("DiceKriging")
#install.packages("rgl")
library(plyr)
library(lattice)
library(mgcv)
library(DiceKriging)
library(rgl)
if(dir.exists('plots') == FALSE){
dir.create('plots')
}
# 1. read the BehaviorSpace experiment output----
results <- read.csv("aids_output.txt", sep=";", header=FALSE, dec='.')
head(results)
names(results)
names(results) <- c("iter1", "iter2", "ccept_use", "test_freq", "ss_time", "pcnt_infected") #ss_time od steady state time :)
results$ccept_use <- results$ccept_use * 100
results$test_freq <- results$test_freq * 100
results$pcnt_infected <- results$pcnt_infected * 100
zlim <- range(results$pcnt_infected)
zlen
zlen <- zlim[2] - zlim[1] + 1
# 2. aggregate results----
sum.data = ddply(results, .(ccept_use, test_freq), summarize,
m_pcnt_infected = mean(pcnt_infected),
sd_pcnt_infected = sd(pcnt_infected))
sum.data <- sum.data[order(sum.data$ccept_use, sum.data$test_freq),]
head(sum.data)
zlim <- range(results$pcnt_infected)
zlen <- zlim[2] - zlim[1] + 1
zlen
# 2. aggregate results----
sum.data = ddply(results, .(ccept_use, test_freq), summarize,
m_pcnt_infected = mean(pcnt_infected),
sd_pcnt_infected = sd(pcnt_infected))
sum.data <- sum.data[order(sum.data$ccept_use, sum.data$test_freq),]
head(sum.data)
# 3. visualize metamodel response surface----
# c_ - counterplot
# w_ - wideframe
# png('plots/c_basic_model.png')
contourplot(m_pcnt_infected ~ ccept_use + test_freq, data = sum.data,
cuts = 20, region = T, col.regions = terrain.colors(zlen),
xlab = "Szansa na użycie antykoncepcji (%)",
ylab = "Szansa na zbadanie się (%)")
# dev.off()
# png('plots/w_basic_model.png')
wireframe(m_pcnt_infected ~ ccept_use + test_freq, data = sum.data,
drape = TRUE, colorkey = TRUE, pretty = T, region = T,
cuts = 10, region = T, col.regions = terrain.colors(zlim),
xlab = "Użycie antykoncepcji", ylab = "Badania",
zlab = "Zarażeni")
# dev.off()
# 4. generate a new set of points for metamodel prediction----
range.for.ccept_use <- range(results$ccept_use)      # range for ccept_use
range.for.test_freq <- range(results$test_freq)  # range for test_freq
ccept_use_range <-   seq(range.for.ccept_use[1], range.for.ccept_use[2])
test_freq_range <- seq(range.for.test_freq[1], range.for.test_freq[2])
new.data <- expand.grid(ccept_use_range, test_freq_range)
colnames(new.data) <- c("ccept_use", "test_freq")
head(new.data)
# 5. our 1st metamodel----
m1 <- lm(pcnt_infected ~ ccept_use + test_freq, data = results)
summary(m1)
# visualize metamodel response surface
new.data$pcnt_infected.hat <- predict(m1, newdata = new.data)
# png('plots/c_1st_meta.png')
contourplot(pcnt_infected.hat ~ ccept_use + test_freq, data = new.data,
cuts = 20, region = T, col.regions = terrain.colors(zlen),
xlab = "Szansa na użycie antykoncepcji (%)",
ylab = "Szansa na zbadanie się (%)")
# dev.off()
# png('plots/w_1st_meta.png')
wireframe(pcnt_infected.hat ~ ccept_use + test_freq, data = new.data,
drape = TRUE, colorkey = TRUE, pretty = T, region = T,
cuts = 10, region = T, col.regions = terrain.colors(zlen),
xlab = "Użycie antykoncepcji", ylab = "Badania",
zlab = "Zarażeni")
# dev.off()
# 6. make a better linear model with parameter interaction----
m2 <- lm(pcnt_infected ~ ccept_use * test_freq, data = results)
summary(m2)
# visualize metamodel response surface
new.data$pcnt_infected.hat <- predict(m2, newdata = new.data)
# png('plots/c_interaction.png')
contourplot(pcnt_infected.hat ~ ccept_use + test_freq, data = new.data,
cuts = 20, region = T, col.regions = terrain.colors(zlen))
# dev.off()
# png('plots/w_interaction.png')
wireframe(pcnt_infected.hat ~ ccept_use + test_freq, data = new.data,
drape = TRUE, colorkey = TRUE, pretty = T, region = T,
cuts = 10, region = T, col.regions = terrain.colors(zlen),
xlab = "Użycie antykoncepcji", ylab = "Badania",
zlab = "Zarażeni")
# dev.off()
# 7. nonlinearity - logarithms-----
m3 <- lm(pcnt_infected ~ (ccept_use + test_freq + log(ccept_use) + log(test_freq))^2, data = results)
summary(m3)
# visualize metamodel response surface
new.data$pcnt_infected.hat <- predict(m3, newdata = new.data)
# png('plots/c_log.png')
contourplot(pcnt_infected.hat ~ ccept_use + test_freq, data = new.data,
cuts = 20, region = T, col.regions = terrain.colors(zlen),
xlab = "Szansa na użycie antykoncepcji (%)",
ylab = "Szansa na zbadanie się (%)")
# dev.off()
# png('plots/w_log.png')
wireframe(pcnt_infected.hat ~ ccept_use + test_freq, data = new.data,
drape = TRUE, colorkey = TRUE, pretty = T, region = T,
cuts = 10, region = T, col.regions = terrain.colors(zlim),
xlab = "Użycie antykoncepcji", ylab = "Badania",
zlab = "Zarażeni")
# dev.off()
# 8. nonlinearity - squares----
m4 <- lm(pcnt_infected ~ (ccept_use + test_freq + I(ccept_use^2) + I(test_freq^2))^2, data = results)
summary(m4)
# visualize metamodel response surface
new.data$pcnt_infected.hat <- predict(m4, newdata = new.data)
# png('plots/c_squares.png')
contourplot(pcnt_infected.hat ~ ccept_use + test_freq, data = new.data,
cuts = 20, region = T, col.regions = terrain.colors(zlen),
xlab = "Szansa na użycie antykoncepcji (%)",
ylab = "Szansa na zbadanie się (%)")
# dev.off()
# png('plots/w_squares.png')
wireframe(pcnt_infected.hat ~ ccept_use + test_freq, data = new.data,
drape = TRUE, colorkey = TRUE, pretty = T, region = T,
cuts = 10, region = T, col.regions = terrain.colors(zlim),
xlab = "Użycie antykoncepcji", ylab = "Badania",
zlab = "Zarażeni")
# dev.off()
# 9. GAM----
m5 <- gam(pcnt_infected ~ s(ccept_use) + s(test_freq), data = results)
summary(m5)
# visualize metamodel response surface
new.data$pcnt_infected.hat <- predict(m5, newdata = new.data)
# png('plots/c_gam.png')
contourplot(pcnt_infected.hat ~ ccept_use + test_freq, data = new.data,
cuts = 20, region = T, col.regions = terrain.colors(zlen),
xlab = "Szansa na użycie antykoncepcji (%)",
ylab = "Szansa na zbadanie się (%)")
# dev.off()
# png('plots/w_gam.png')
wireframe(pcnt_infected.hat ~ ccept_use + test_freq, data = new.data,
drape = TRUE, colorkey = TRUE, pretty = T, region = T,
cuts = 10, region = T, col.regions = terrain.colors(zlim),
xlab = "Użycie antykoncepcji", ylab = "Badania",
zlab = "Zarażeni")
# dev.off()
plot(m4)
# stoch. kriging
m6 <- km(m_pcnt_infected ~ .,
sum.data[,1:2], sum.data[,3],
covtype = "gauss",
noise.var = sum.data[,4])
# visualize metamodel response surface
new.data$pcnt_infected.hat <- predict(m6, newdata = new.data[,1:2], type='SK')$mean
# png('plots/c_stoch_kring.png')
contourplot(pcnt_infected.hat ~ ccept_use + test_freq, data = new.data,
cuts = 20, region = T, col.regions = terrain.colors(zlen),
xlab = "Szansa na użycie antykoncepcji (%)",
ylab = "Szansa na zbadanie się (%)")
# dev.off()
# png('plots/w_stoch_kring.png')
wireframe(pcnt_infected.hat ~ ccept_use + test_freq, data = new.data,
drape = TRUE, colorkey = TRUE, pretty = T, region = T,
cuts = 10, region = T, col.regions = terrain.colors(zlim),
xlab = "Użycie antykoncepcji", ylab = "Badania",
zlab = "Zarażeni")
# dev.off()
# 11. 3D visualization with rgl----
#
with(new.data, {
pcnt_infected.hat.m <- matrix(pcnt_infected.hat, length(ccept_use_range))
colorlut <- terrain.colors(zlen) # height color lookup table
col <- colorlut[pcnt_infected.hat.m - zlim[1] + 1 ] # assign colors to heights for each point
persp3d(ccept_use_range,test_freq_range, pcnt_infected.hat.m, color = col)
grid3d(c("x", "y", "z"))
})
# 12. play animation----
play3d(spin3d(axis = c(0, 0, 1), rpm = 4), duration = 15)
